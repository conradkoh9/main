//@author: a0119491b



	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

string Storage::Search(string input){
	vector<Task*> PowerSearch_Result = PowerSearch(input);
	vector<Task*> NearSearch_Result = NearSearch(input);
	if (PowerSearch_Result.empty() && NearSearch_Result.empty()){
		return _FEEDBACK_SEARCH_FAILURE;
	}
	else if (PowerSearch_Result.empty() && !NearSearch_Result.empty()){
		return ToString(NearSearch_Result);
	}
	else
	{
		return ToString(PowerSearch_Result);
	}
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

vector<Task*> Storage::PowerSearch(string input){
	vector<Task*>::iterator iter;
	vector<Task*> searchResult;
	for (iter = taskList.begin(); iter != taskList.end(); ++iter){
		Task* currentTask = *iter;
		if (currentTask->isContains(input)){
			searchResult.push_back(currentTask);
		}
	}
	return searchResult;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

vector<Task*> Storage::NearSearch(string input){
	vector<Task*>::iterator iter;
	vector<Task*> searchResult;
	for (iter = taskList.begin(); iter != taskList.end(); ++iter){
		Task* currentTask = *iter;
		if (currentTask->isNearMatch(input)){
			searchResult.push_back(currentTask);
		}
	}
	return searchResult;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

string Storage::SearchEmptySlots(string input){
	/*if (dateTime->isDateType(input)){
		string date = dateTime->ConvertDateTime(input);*/
	DateTime* dt = new DateTime(input);
	string stdtm = dt->Standardized();
	if (dt->isValidFormat){
		InitializeDayTask(input);
		SetDayCalendar();
		return GetEmptySlots();
	}
	/*}
	else{
		*return _FEEDBACK_SEARCH_FAILURE;
	}*/
}
	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::InitializeDayTask(string date){
	for (int i = 0; i < taskList.size(); i++){
		string dateTime = taskList[i]->GetStartDate();
		size_t position = 0;
		position = dateTime.find_first_of(":"); // 17:00pm 07/04/2015 Only this format can be recognized
		if (position != string::npos){
			daytask.push_back(taskList[i]);
		}
	}
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::SetDayCalendar(){
	InitializeDayCalendar();
	SetSleepingTime();
	SetOccupiedSlots();
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::InitializeDayCalendar(){
	int timeIntervals = 48;
	for (int i = 0; i < timeIntervals; i++){
		daycalendar[i] = "empty";
	}
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::SetSleepingTime(){
	int sleeping_time = 14; //from 00:00am to 7:00am 
	for (int i = 0; i < sleeping_time; i++){
		daycalendar[i] = "sleeping";
	}
	daycalendar[47] = "sleeping"; //from 23:00pm to 00:00am
	daycalendar[46] = "sleeping";
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::SetOccupiedSlots(){
	for (int i = 0; i < daytask.size(); i++){
		string startDateTime = daytask[i]->GetStartDate();
		string endDateTime = daytask[i]->GetEndDate();
		size_t StartPos = 0, sPos = 2, ePos = 2;
		string startTime, endTime;
		int start_time, end_time;
		startTime = startDateTime.substr(StartPos, sPos); //17:00pm 07/04/2015    This is to get integer 17
		endTime = endDateTime.substr(StartPos, ePos);
		start_time = atoi(startTime.c_str());
		end_time = atoi(endTime.c_str());

		int indexStart = 2 * start_time;
		int indexEnd = 2 * end_time;

		for (int i = indexStart; i < indexEnd; i++){
			daycalendar[i] = "busy";
		}
	}
}

//@auhtor A0119491B
string Storage::GetEmptySlots(){
	for (int i = 0; i < 48; i++){
		if (daycalendar[i] == "empty"){
			if (i % 2 == 0){
				int hour = i / 2;
				ostringstream oss;
				oss << setw(2) << setfill('0') << hour << ":" << "00" << " " << "to" << " " << setw(2) << setfill('0') << hour << ":" << "30";
				string dbg = oss.str();
				emptyslots.push_back(oss.str());
			}
			else{
				int hour = i / 2;
				ostringstream oss;
				oss << setw(2) << setfill('0') << hour << ":" << "30" << " " << "to" << " " << setw(2) << setfill('0') << hour + 1 << ":" << "00";
				string dbg = oss.str();
				emptyslots.push_back(oss.str());
			}
		}
	}
	return ToString(emptyslots);
}

//====================================================================
//STATS
//====================================================================
int Storage::Size(){
	return taskList.size();
}

string Storage::GetTask(int index){
	return taskList[index]->ToString();
}

string Storage::GetFileName(){
	return _filename;
}

string Storage::GetFloatingList(){
	string output = ToString(floatingList);
	int size = floatingList.size();
	return ToString(floatingList);
}

string Storage::GetDeadlineList(){
	//string dbg = deadlineList.front()->Task::ToShortString();
	return ToString(deadlineList);
}

string Storage::GetTimedList(){
	return ToString(timedList);
}



	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::FilterTask(){
	ClearFilteredLists();
	initializeLists();
	sortTask();
	rearrangeTaskList();
	return;
}
	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::initializeLists(){
	int size_taskList = taskList.size();

	for (int i = 0; i < size_taskList; i++){
		string dbg = taskList[i]->ToShortString();
		if (taskList[i]->GetType() == Task::TASKTYPE::TIMED){
			timedList.push_back(taskList[i]);
		}
		else if (taskList[i]->GetType() == Task::TASKTYPE::DEADLINE){
			deadlineList.push_back(taskList[i]);
		}
		else if (taskList[i]->GetType() == Task::TASKTYPE::FLOATING){
			floatingList.push_back(taskList[i]);
		}
		else{
		}
	}
}
	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::sortTask(){
	sortListsByTime(timedList);
	sortListsByTime(deadlineList);
}
	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::sortListsByTime(vector <Task*> &V){
	int size_V = V.size();
	string datetime1, datetime2;
	for (int i = 0; i < size_V; i++){
		for (int j = i; j < size_V; ++j){
			datetime1 = V[i]->GetStartDate();
			datetime2 = V[j]->GetStartDate();

			if (datetime1 == "" && datetime2 == ""){
				datetime1 = V[i]->GetEndDate();
				datetime2 = V[j]->GetEndDate();
			}

			DateTime dt1(datetime1);
			DateTime dt2(datetime2);
			if (dt2.IsEarlierThan(dt1)){
				Task* temp = V[i];
				V[i] = V[j];
				V[j] = temp;
			}
		}
	}
}
	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::rearrangeTaskList(){
	taskList.clear();
	vector<Task*>::iterator iter;
	for (iter = timedList.begin(); iter != timedList.end(); iter++){
		taskList.push_back(*iter);
	}
	for (iter = deadlineList.begin(); iter != deadlineList.end(); iter++){
		taskList.push_back(*iter);
	}
	for (iter = floatingList.begin(); iter != floatingList.end(); iter++)
	{
		taskList.push_back(*iter);
	}

}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

size_t Task::LevenshteinDistance(const std::string &s1, const std::string &s2){
	const size_t m(s1.size());
	const size_t n(s2.size());

	if (m == 0) return n;
	if (n == 0) return m;

	size_t *costs = new size_t[n + 1];

	for (size_t k = 0; k <= n; k++) {
		costs[k] = k;
	}

	size_t i = 0;
	for (std::string::const_iterator it1 = s1.begin(); it1 != s1.end(); ++it1, ++i){
		costs[0] = i + 1;
		size_t corner = i;
		size_t j = 0;
		for (std::string::const_iterator it2 = s2.begin(); it2 != s2.end(); ++it2, ++j){
			size_t upper = costs[j + 1];
			if (*it1 == *it2){
				costs[j + 1] = corner;
			}
			else{
				size_t t(upper<corner ? upper : corner);
				costs[j + 1] = (costs[j]<t ? costs[j] : t) + 1;
			}
			corner = upper;
		}
	}

	size_t result = costs[n];
	delete[] costs;

	return result;
}

//author A0119513L
bool Task::isFloating(){
	bool floating = false;
	if (enddate == "" && startdate == "")
		floating = true;
	return floating;
}

//author A0119513L	
bool Task::isDeadline(){
	bool deadline = false;
	if (enddate != "" && startdate == "")
		deadline = true;
	return deadline;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_ScheduleLibraryTest\Libtest.cpp
	 */

			TEST_METHOD(STORAGE_FILTER){
			vector<Task*> tasklist;
			Storage* storage = new Storage("Storage_Filter.txt");
			//set new task
			storage->Clear();
			Task* task = new Task();
			task->SetDescription("do homework");
			task->SetEndDate("16/04/2015");
			task->SetStartDate("13/04/2015");
			task->SetPriority("1");
			task->SetStatus("Incomplete");
			storage->Add(task);

			string timedTask = storage->GetTimedList();
			string deadlinedTask = storage->GetDeadlineList();
			string floatingTask = storage->GetFloatingList();
			string expected[2];

			expected[0] = "\\b 1: \\b0 [13/04/2015][16/04/2015] do homework";
			expected[1] = "";
			Assert::AreEqual(expected[0], timedTask);
			Assert::AreEqual(expected[1], deadlinedTask);
			Assert::AreEqual(expected[1], floatingTask);
			tasklist.clear();

		}


	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_ScheduleLibraryTest\Libtest.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_ScheduleLibraryTest\Libtest.cpp
	 */

		TEST_METHOD(STORAGE_SEARCH){
			Storage* storage = new Storage("Storage_PowerSearch.txt");
			storage->Clear();
			//Setting a task to be seached
			Task* task = new Task();
			task->SetDescription("homework");
			task->SetEndDate("08/04/2015");
			task->SetStartDate("07/04/2015");
			task->SetPriority("1");
			task->SetStatus("Incomplete");
			storage->Add(task);

			vector<Task*> RESULT;
			vector<string> input(10);
			string expected[2], result;
			expected[0] = "\\b 1: \\b0 [07/04/2015][08/04/2015] homework";
			expected[1] = "No results found.";

			//Testing search by description
			input[Smartstring::FIELD::DESCRIPTION] = "homework";
			result = storage->Search(input[Smartstring::FIELD::DESCRIPTION]);
			Assert::AreEqual(expected[0], result);

			//Testing search by start date
			input[Smartstring::FIELD::STARTDATE] = "07/04/2015";
			result = storage->Search(input[Smartstring::FIELD::STARTDATE]);
			Assert::AreEqual(expected[0], result);

			//Testing search by end date
			input[Smartstring::FIELD::ENDDATE] = "08/04/2015";
			result = storage->Search(input[Smartstring::FIELD::ENDDATE]);
			Assert::AreEqual(expected[0], result);

			//Testing search by priority
			input[Smartstring::FIELD::PRIORITY] = "1";
			result = storage->Search(input[Smartstring::FIELD::PRIORITY]);
			Assert::AreEqual(expected[0], result);

			//Testing Failure case
			input[Smartstring::FIELD::DESCRIPTION] = "shopping";
			result = storage->Search(input[Smartstring::FIELD::DESCRIPTION]);
			Assert::AreEqual(expected[1], result);

			//Testing Close Search
			input[Smartstring::FIELD::DESCRIPTION] = "howork";
			RESULT = storage->NearSearch(input[Smartstring::FIELD::DESCRIPTION]);
			result = storage->ToString(RESULT);
			Assert::AreEqual(expected[0], result);

		}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_ScheduleLibraryTest\Libtest.cpp





