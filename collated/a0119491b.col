//@author: a0119491b



	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

string Storage::Search(string input){
	vector<Task*> PowerSearch_Result;
	try{
		PowerSearch_Result = PowerSearch(input);
	}
	catch (InvalidList){
		return _FEEDBACK_SEARCH_FAILURE;
	}

	if (PowerSearch_Result.empty()){
		return _FEEDBACK_SEARCH_FAILURE;
	}
	else{
		return ToString(PowerSearch_Result, 1);
	}
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

vector<Task*> Storage::PowerSearch(string input){
	vector<Task*>::iterator iter;
	vector<Task*> searchResult;

	if (taskList.size() == 0){
		throw invalid_list;
	}

	for (iter = taskList.begin(); iter != taskList.end(); ++iter){
		Task* currentTask = *iter;
		if (currentTask->isContains(input)){
			searchResult.push_back(currentTask);
		}
	}
	return searchResult;
}



	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

string Storage::SearchEmptySlots(string input){
		DateTime* dt = new DateTime(input);
		string stdtm = dt->Standardized();
		if (dt->isValidFormat){
			InitializeDayTask(stdtm);
			SetDayCalendar();
			return GetEmptySlots();
	   }else{
		return _FEEDBACK_SEARCH_FAILURE;
	}
}
	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::InitializeDayTask(string date){
	for (int i = 0; i < taskList.size(); i++){
		string dateTime = taskList[i]->GetStartTime();
		size_t position = 0;
		position = dateTime.find_first_of(":"); // 17:00pm 07/04/2015 Only this format can be recognized
		assert(position > 0);
		if (position != string::npos){
			daytask.push_back(taskList[i]);
		}
	}
}
	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::SetDayCalendar(){
	InitializeDayCalendar();
	SetSleepingTime();
	SetOccupiedSlots();
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::InitializeDayCalendar(){
	int timeIntervals = 48;
	for (int i = 0; i < timeIntervals; i++){
		daycalendar[i] = "empty";
	}
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::SetSleepingTime(){
	int sleeping_time = 14; //from 00:00am to 7:00am 
	for (int i = 0; i < sleeping_time; i++){
		daycalendar[i] = "sleeping";
	}
	daycalendar[47] = "sleeping"; //from 23:00pm to 00:00am
	daycalendar[46] = "sleeping";
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::SetOccupiedSlots(){
	for (int i = 0; i < daytask.size(); i++){
		string startTime = daytask[i]->GetStartTime();
		string endTime = daytask[i]->GetEndTime();
		int indexStart, indexEnd;

		if (startTime != "" && endTime != ""){
			indexStart = GetSlotIndex(startTime);
			indexEnd = GetSlotIndex(endTime);
			SetBusySlots(indexStart, indexEnd);
		}
	}
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

int Storage::GetSlotIndex(string time){
	int hourPos = 0, minPos = 3, leghth = 2;
	string hourInt, minInt;
	int hour, min, index;
	hourInt = time.substr(hourPos, leghth);
	minInt = time.substr(minPos, leghth);
	hour = atoi(hourInt.c_str());
	min = atoi(minInt.c_str());
	if (min > 0){
		min = 1;
	}
	index = 2 * hour + min;
	return index;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::SetBusySlots(int indexStart, int indexEnd){
	for (int i = indexStart; i < indexEnd; i++){
		daycalendar[i] = "busy";
	}
}
//@auhtor A0119491B
string Storage::GetEmptySlots(){
	int startindex = 0, endindex = 0, time_intervals = 48, starthr, endhr;

	int next = 0;
	for (int i = 0; i < time_intervals; i++)
	{
		assert(daycalendar[i] != "");
		startindex = i; 
		next = i; 
		while (daycalendar[next] == "empty" && i != 47){
			next++;
			assert(daycalendar[next] != "");
		} //get the end index of empty slots

		endindex = next;
		if (i != next){
			if (startindex % 2 == 0 && endindex % 2 == 0){ //check startindex and endindex are odd or even
				starthr = startindex / 2;
				endhr = endindex / 2;
				ostringstream oss;
				oss << setw(2) << setfill('0') << starthr << ":" << "00 to " << setw(2) << setfill('0') << endhr << ":00";
				emptyslots.push_back(oss.str());
			}
			else if (startindex % 2 != 0 && endindex % 2 == 0){
				starthr = startindex / 2;
				endhr = endindex / 2;
				ostringstream oss;
				oss << setw(2) << setfill('0') << starthr << ":" << "30 to " << setw(2) << setfill('0') << endhr << ":00";
				emptyslots.push_back(oss.str());
			}
			else if (startindex % 2 == 0 && endindex % 2 != 0){
				starthr = startindex / 2;
				endhr = endindex / 2;
				ostringstream oss;
				oss << setw(2) << setfill('0') << starthr << ":" << "00 to " << setw(2) << setfill('0') << endhr << ":30";
				emptyslots.push_back(oss.str());
			}
			else if (startindex % 2 != 0 && endindex % 2 != 0){
				starthr = startindex / 2;
				endhr = endindex / 2;
				ostringstream oss;
				oss << setw(2) << setfill('0') << starthr << ":" << "30 to " << setw(2) << setfill('0') << endhr << ":30";
				emptyslots.push_back(oss.str());
			}

			i = endindex; //let for loop continnue at endindex
		}

	}

	return ToString(emptyslots);
}


//====================================================================
//STATS
//====================================================================
int Storage::Size(){
	return taskList.size();
}

string Storage::GetTask(int index){
	return taskList[index]->ToString();
}

string Storage::GetFileName(){
	return _filename;
}


string Storage::GetTimedList(){
	int startIndex = 1;
	return ToString(timedList, startIndex);
}

string Storage::GetDeadlineList(){
	int startIndex = timedList.size() + 1;
	return ToString(deadlineList, startIndex);
}

string Storage::GetFloatingList(){
	int startIndex = timedList.size() + deadlineList.size() + 1;
	return ToString(floatingList, startIndex);
}





	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::InitializeLists(){
	int size_taskList = taskList.size();

	for (int i = 0; i < size_taskList; i++){
		string dbg = taskList[i]->ToShortString();
		if (taskList[i]->GetType() == Task::TASKTYPE::TIMED){
			timedList.push_back(taskList[i]);
		}
		else if (taskList[i]->GetType() == Task::TASKTYPE::DEADLINE){
			deadlineList.push_back(taskList[i]);
		}
		else if (taskList[i]->GetType() == Task::TASKTYPE::FLOATING){
			floatingList.push_back(taskList[i]);
		}
		else{
		}
	}
}
	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

string Storage::SortAllLists(){
	try{
		SortListsByTime(timedList);
	}
	catch (InvalidList){
		return _FEEDBACK__SORT_FAILURE;
	}

	try{
		SortListsByTime(deadlineList);
	}
	catch (InvalidList){
		return _FEEDBACK__SORT_FAILURE;
	}
	SortTaskList();
	return _FEEDBACK_SORT_SUCCESS;
}
	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::SortListsByTime(vector <Task*> &V){
	int size_V = V.size();
	string dt1, dt2, datetime1, datetime2;
	for (int i = 0; i < size_V; i++){
		for (int j = i; j < size_V; ++j){
			dt1 = V[i]->GetStartDateTime();
			dt2 = V[j]->GetStartDateTime();


			if (dt1 != "" && dt2 != "")
			{
				datetime1 = dt1;
				datetime2 = dt2;
			}
			else if (dt1 == "" && dt2 == ""){
				dt1 = V[i]->GetEndDateTime();
				dt2 = V[j]->GetEndDateTime();
				datetime1 = dt1;
				datetime2 = dt2;
			}
			else{
				throw invalid_list;
			}

			DateTime dt1(datetime1);
			DateTime dt2(datetime2);
			if (dt2.IsEarlierThan(dt1)){
				Task* temp = V[i];
				V[i] = V[j];
				V[j] = temp;
			}
		}
	}
}
	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp
	 */

void Storage::SortTaskList(){
	taskList.clear();
	assert(taskList.size() == 0);
	vector<Task*>::iterator iter;
	for (iter = timedList.begin(); iter != timedList.end(); iter++){
		taskList.push_back(*iter);
	}
	for (iter = deadlineList.begin(); iter != deadlineList.end(); iter++){
		taskList.push_back(*iter);
	}
	for (iter = floatingList.begin(); iter != floatingList.end(); iter++)
	{
		taskList.push_back(*iter);
	}

}
	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Storage.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

Task::Task()
{
	startDateTime = "";
	description = "";
	priority = "";
	endDateTime = "";
	startDateTime = "";
	startdate = "";
	enddate = "";
	starttime = "";
	endtime = "";
	status = _STATUS_INCOMPLETE;
}
	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

Task::Task(Task* task){
	startDateTime = "";
	startdate = "";
	starttime = "";
	description = "";
	priority = "";
	endDateTime = "";
	enddate = "";
	endtime = "";

	status = _STATUS_INCOMPLETE;

	if (!task == NULL){
		description = task->GetDescription();
		startDateTime = task->GetStartDateTime();
		endDateTime = task->GetEndDateTime();
		priority = task->GetPriority();
		status = task->GetStatus();
		startdate = task->GetStartDate();
		enddate = task->GetEndDate();
		starttime = task->GetStartTime();
		endtime = task->GetEndTime();
	}
}

Task::~Task()
{
}
	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

string Task::SetDescription(string input){
	description = input;
	return _FEEDBACK_DESCRIPTION_SET;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

string Task::SetStartDateTime(string dt){
	startDateTime = dt;
	standardStartdt = new DateTime(startDateTime);
	startDateTime = standardStartdt->Standardized();
	startdate = standardStartdt->GetDateWithoutYear();
	starttime = standardStartdt->GetTime();
	return _FEEDBACK_STARTDATE_SET;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

string Task::SetEndDateTime(string dt){
	endDateTime = dt;
	standardEnddt = new DateTime(endDateTime);
	endDateTime = standardEnddt->Standardized();
	enddate = standardEnddt->GetDateWithoutYear();
	endtime = standardEnddt->GetTime();
	return _FEEDBACK_ENDDATE_SET;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

string Task::SetPriority(string input){
	priority = input;
	return _FEEDBACK_PRIORITY_SET;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

string Task::SetStatus(string input){
	status = input;
	return _FEEDBACK_STATUS_SET;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

string Task::SetDefaultEnddate(){
	if (startDateTime != "" && endDateTime == "")
	{
		standardEnddt = standardStartdt->GetDefaultEndDate();
		endDateTime = standardEnddt->Standardized();
		enddate = standardEnddt->GetDate();
		endtime = standardStartdt->GetTime();
	}
	return _FEEDBACK_DEFAULTDATE_SET;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

string Task::MarkComplete(){
	status = _STATUS_COMPLETE;
	return status;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

string Task::GetDescription(){
	return description;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

string Task::GetPriority(){
	return priority;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

string Task::GetStartDateTime(){
	return startDateTime;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

string Task::GetStartDate(){
	return startdate;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

string Task::GetStartTime(){
	return starttime;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

string Task::GetEndDateTime(){
	return endDateTime;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

string Task::GetEndDate(){
	return enddate;
}
	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

string Task::GetEndTime(){
	return endtime;
}


	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

string Task::GetStatus(){
	return status;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

Task::TASKTYPE Task::GetType(){     
	if (endDateTime == "" && startDateTime == ""){
		return Task::TASKTYPE::FLOATING;
	}
	else if (startDateTime == "" && endDateTime!=""){
		return Task::TASKTYPE::DEADLINE;
	}
	else{
		return Task::TASKTYPE::TIMED;
	}
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

bool Task::isContains(string input){
	bool found = false;

	//search start date and end date
	found = isContainInDate(input);  // need a method to get date without time 
	//search priority
	if (!found){
		found = isContainPriority(input);
	}
	//search description
	if (!found){
		found = isContainDescription(input);
	}

	return found;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

bool Task::isContainInDate(string input){
	DateTime* dt = new DateTime(input);
	int pos_start, pos_end; 
	if (dt->isValidFormat){
		string datetime = dt->Standardized();
		pos_start = startDateTime.find(datetime);
		pos_end = endDateTime.find(datetime);
			if (pos_start != string::npos || pos_end != string::npos){
				return true;
			}
	}
	return false;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

bool Task::isContainPriority(string input){
	string keyword, prio;
	istringstream in(input);
	in >> keyword;
	in >> prio;
	if (keyword == "priority" && prio == priority){
		return true;
	}
	return false;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp
	 */

bool Task::isContainDescription(string input){
	vector<string> token_description;
	vector<string> token_input;
	Smartstring* smartstring_in = new Smartstring(input);
	Smartstring* smartstring_des = new Smartstring(description);
	bool found;
	int pos;
	
	token_input = smartstring_in->Tokenize(" ");
	token_description = smartstring_des->Tokenize(" ");
	for (int i = 0; i < token_input.size(); i++){   //tokenize the input. search the token one by one to see if these words all in the description
		found = false;
		for (int j = 0; j < token_description.size(); j++){ //tokenize the description. compare each token of description with each token of the input
				pos = token_description[j].find(token_input[i]);
				if (pos != string::npos || isNearMatch(token_input[i], token_description[j])){
					found = true;
				}
		}

		if (!found){  //after comparison, the token of input is not contained in description. then return false
			return false;
		}
	}

	return true;

}

//@auhtor A0119491B
bool Task::isNearMatch(string input, string des){
	bool match = false;
	size_t difference;
	size_t tolarent_diff = 2; //Only two wrong letters in one word can be accepted  

	for (int i = 0; i < numberOfFields; ++i){
		if (!match){
			difference = LevenshteinDistance(input, des);
			if (difference <= tolarent_diff)
				match = true;
			}
		}

	return match;
}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\Task.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\UI_Controller.cpp
	 */

void UI_Controller::QuickSearch(string input){
	if (!input.empty()){
		logic->QuickSearch(input);
		UpdateDisplays();
		ClearStreams();
	}
	return;
}

void UI_Controller::ToRTF(string filename, string input){
	string dbg = input;
	ofstream of;
	of.open(filename.c_str(), ios::trunc);
	of << _rtfheadercolor;

	//start replace new line characters
	static int startIdx = 0;
	int endIdx = input.length() - 1;
	int found = input.find_first_of('\n');
	while (found != string::npos){
		string before = input.substr(0, found);
		string after = input.substr(found + 1, endIdx);
		string result = before + _rtfnewline + after;
		input = result;

		startIdx = found + _rtfnewline.length();
		found = input.find_first_of('\n', startIdx);

	}
	//end replace new line characters

	of << input;
	of << _rtffooter;
	of.close();

	return;
}

string UI_Controller::UpdateDisplays(){
	string feedback = "";
	string dbg = logic->mout.str();
	DISPLAY_STATUS = logic->status.str();
	ToRTF(rtf_main, logic->mout.str());
	ToRTF(rtf_deadline, logic->dout.str());
	ToRTF(rtf_float, logic->fout.str());
	ToRTF(rtf_timed, logic->tout.str());
	return feedback;
}

string UI_Controller::ClearStreams(){
	string feedback;
	logic->dout.clear();
	logic->dout.str("");
	logic->fout.clear();
	logic->fout.str("");
	logic->tout.clear();
	logic->tout.str("");
	logic->mout.clear();
	logic->mout.str("");
	logic->status.clear();
	logic->status.str("");
	return feedback;
}
	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_Schedule\UI_Controller.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_ScheduleLibraryTest\Libtest.cpp
	 */

			TEST_METHOD(STORAGE_FILTER){
			vector<Task*> tasklist;
			Storage* storage = new Storage("Storage_Filter.txt");
			//set new task
			storage->Clear();
			Task* task = new Task();
			task->SetDescription("do homework");
			task->SetEndDateTime("16/04/2015");
			task->SetStartDateTime("13/04/2015");
			task->SetPriority("1");
			task->SetStatus("Incomplete");
			storage->Add(task);

			string timedTask = storage->GetTimedList();
			string deadlinedTask = storage->GetDeadlineList();
			string floatingTask = storage->GetFloatingList();
			string expected[2];

			expected[0] = "\\b 1: \\b0 [13 April][16 April] do homework";
			expected[1] = "";
			Assert::AreEqual(expected[0], timedTask);
			Assert::AreEqual(expected[1], deadlinedTask);
			Assert::AreEqual(expected[1], floatingTask);
			tasklist.clear();

		}


	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_ScheduleLibraryTest\Libtest.cpp





	/**
	 * origin: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_ScheduleLibraryTest\Libtest.cpp
	 */

		TEST_METHOD(STORAGE_SEARCH){
			Storage* storage = new Storage("Storage_PowerSearch.txt");
			storage->Clear();
			//Setting a task to be seached
			Task* task = new Task();
			task->SetDescription("homework");
			task->SetEndDateTime("08/04/2015");
			task->SetStartDateTime("07/04/2015");
			task->SetPriority("1");
			task->SetStatus("Incomplete");
			storage->Add(task);

			vector<Task*> RESULT;
			vector<string> input(10);
			string expected[2], result;
			expected[0] = "\\b 1: \\b0 [7 April][8 April] homework";
			expected[1] = "No results found. ";

			//Testing search by description
			input[Smartstring::FIELD::DESCRIPTION] = "homework";
			result = storage->Search(input[Smartstring::FIELD::DESCRIPTION]);
			Assert::AreEqual(expected[0], result);

			//Testing search by start date
			input[Smartstring::FIELD::STARTDATE] = "07/04/2015";
			result = storage->Search(input[Smartstring::FIELD::STARTDATE]);
			Assert::AreEqual(expected[0], result);

			//Testing search by end date
			input[Smartstring::FIELD::ENDDATE] = "08/04/2015";
			result = storage->Search(input[Smartstring::FIELD::ENDDATE]);
			Assert::AreEqual(expected[0], result);

			//Testing search by priority
			input[Smartstring::FIELD::PRIORITY] = "priority 1";
			result = storage->Search(input[Smartstring::FIELD::PRIORITY]);
			Assert::AreEqual(expected[0], result);

			//Testing Failure case
			input[Smartstring::FIELD::DESCRIPTION] = "shopping";
			result = storage->Search(input[Smartstring::FIELD::DESCRIPTION]);
			Assert::AreEqual(expected[1], result);

		}

	// End of segment: C:\Users\conra_000\Desktop\Collate Tool\I_Schedule source\I_ScheduleLibraryTest\Libtest.cpp





